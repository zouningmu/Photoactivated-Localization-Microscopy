function [Z_pos,Z_cal_curve,XYPSF,fitResult,cf_,goodness]=iQ_Zcal(mv,z_step,mask_sz,IM_info)
%% THIS FUNCTION ANALYZE THE IMAGES AT DIFFERENT Z POSITION AND Z CALIBRATION CURVE
% INPUT: 
% mv: movie foler with images at different z position
% z_step: step size of piezostage
% mask_sz: size of mask that cover each spots, recommend size:11
% IM_info: contains pixel size information  and correction factor for cylindrical lens;

% OUTPUT: Z_pos
% Z_pos: generate the z calbration curves data sets
% Z_cal_curve: Z calibration fitting curve
% XYPSF: [sigma_x,sigma_y/corr_cylin,sigma_x-(sigma_y/corr_cylin)]

%% TOP of the routine
tic
cd(mv); D=dir;
num_frame=length(D)-2;
sz=(mask_sz-1)/2;
corr_cylin=IM_info(1)/IM_info(2);
%%   FIND OUT THE POSSIBLE SPOTS FOR Z CALIBRATION
%  check out 6 individual images of the movie, the spacing between each
%  image is equal to (frame number of movie/6). The purpose of this
%  process is to determine which spots are ideal for Z calibration.
plotlist=(3:floor((num_frame-1)/5):num_frame)';
    figure
    for m=1:length(plotlist)
    plotnum=num2str(plotlist(m,1)-2);
    plotname=strcat('frame no. ',plotnum);
    im=imread(D(plotlist(m,1)).name);
    subplot(2,3,m);
    imshow(im,[]);
    title(plotname);
    end
%% ASSIGN THE REFERENCE FRAME AND PICK SPOTS FOR CALIBRATION
asn_frame=input('input frame number to choose calibration spots: ');


 im=double(imread(D(asn_frame+2).name));                % load the assigned frame
[im_bk,peak,~,~]=iQ_pkfnd(im,4,mask_sz);               % find out the local maximum spots
 
figure;  imshow(im_bk,[])                               % show the image                                      
spot_coor=putp;                                         % pick up spots for z calibrations by clicking on the spots
pick_hand=spot_coor(:,1); pick_hand(:,2)=spot_coor(:,2);
 
 pick= iQ_nearestPoints(pick_hand,peak);                % find out the exact coordinates of assigned spots
 pick=cell2mat(pick);
[row_pick ~]=size(pick);
 %% FIT SPOTS WITH 2D GAUSSIAN FUNCTON 
 PSFW_H=cell(1,row_pick); 
 XYPSF=cell(1,row_pick); 
 for gfi=3:num_frame+2;
     im=double(imread(D(gfi).name));
     bk_fit = imopen(im,strel('disk',15));               % fit the background
     im_bk=im-bk_fit;                                    % remove the background from original image
     display(['Frame no. ',int2str(gfi-2)]) 
    
for j=1:row_pick; 
   [xi,yi]=meshgrid(pick(j,1)-sz:pick(j,1)+sz,pick(j,2)-sz:pick(j,2)+sz);
   zi=im_bk(pick(j,2)-sz:pick(j,2)+sz,pick(j,1)-sz:pick(j,1)+sz);
   results = iQ_autoGaussianSurfML(xi,yi,zi);
   sigma_x=results.sigmax; sigma_y=results.sigmay/corr_cylin;
   ellip=2*abs((sigma_x-sigma_y))/(sigma_x+sigma_y);
                                               
   PSFW_H{gfi-2,j}=sigma_x-sigma_y;              % calculate the width-height vaue from PSF fitting
   XYPSF{gfi-2,j}=[sigma_x,sigma_y,sigma_x-sigma_y,ellip];
end

 end
 
%% GENERATE (WIDTH-HEIGHT) vs STEP SIZE DATA
PSFW_H=cell2mat(PSFW_H);
XYPSF=cell2mat(XYPSF);

% find out the minimum of  width-height and set it as origin.
[~, idx]=min(abs(PSFW_H));
idx_mode=mode(idx); % M = mode(X) for vector X computes the sample mode M, (i.e., the most frequently occurring value in X).

Z_pos=[];
for k=1:length(idx)
    Z_pos(:,2*k-1)=((-idx_mode+1)*z_step:z_step:(num_frame-idx_mode)*z_step);
    Z_pos(:,2*k)=PSFW_H(:,k);
    Z_pos_com_x(num_frame*(k-1)+1:num_frame*k,1)=Z_pos(:,2*k-1);
    Z_pos_com_y(num_frame*(k-1)+1:num_frame*k,1)=Z_pos(:,2*k);
end

%% FIT THE CURVES with 4th POLYNOMINAL, and GENERATE FILE with FITTING RESULTS
[fitResult,cf_,goodness]=iQ_createFit(Z_pos_com_x,Z_pos_com_y);
x=(-1000:z_step:1000)';
y=fitResult(1,1).*x.^4+fitResult(2,1).*x.^3+fitResult(3,1).*x.^2+...
         fitResult(4,1).*x+fitResult(5,1);
Z_cal_curve=[x,y];     
% show the fitting results
cf_
goodness
toc

%% nested function iQ_createFit
function [fitResult,cf_,goodness]=iQ_createFit(x1,y1)
%CREATEFIT Create plot of data sets and fits
%   CREATEFIT(X1,Y1)
%   Creates a plot, similar to the plot in the main Curve Fitting Tool,
%   using the data that you provide as input.  You can
%   use this function with the same data you used with CFTOOL
%   or with different data.  You may want to edit the function to
%   customize the code and this help message.
%
%   Number of data sets:  1
%   Number of fits:  1

% Data from data set "y1 vs. x1":
%     X = x1:
%     Y = y1:
%     Unweighted

% Auto-generated by MATLAB on 13-Apr-2012 02:58:38

% Set up figure to receive data sets and fits
f_ = clf;
figure(f_);
set(f_,'Units','Pixels','Position',[445 129 688 485]);
% Line handles and text for the legend.
legh_ = [];
legt_ = {};
% Limits of the x-axis.
xlim_ = [Inf -Inf];
% Axes for the plot.
ax_ = axes;
set(ax_,'Units','normalized','OuterPosition',[0 0 1 1]);
set(ax_,'Box','on');
axes(ax_);
hold on;

% --- Plot data that was originally in data set "y1 vs. x1"
x1 = x1(:);
y1 = y1(:);
h_ = line(x1,y1,'Parent',ax_,'Color',[0.333333 0 0.666667],...
    'LineStyle','none', 'LineWidth',1,...
    'Marker','.', 'MarkerSize',12);
xlim_(1) = min(xlim_(1),min(x1));
xlim_(2) = max(xlim_(2),max(x1));
legh_(end+1) = h_;
legt_{end+1} = 'y1 vs. x1';

% Nudge axis limits beyond data limits
if all(isfinite(xlim_))
    xlim_ = xlim_ + [-1 1] * 0.01 * diff(xlim_);
    set(ax_,'XLim',xlim_)
else
    set(ax_, 'XLim',[-1081.8, 1141.8]);
end

% --- Create fit "fit 1"
ok_ = isfinite(x1) & isfinite(y1);
if ~all( ok_ )
    warning( 'GenerateMFile:IgnoringNansAndInfs',...
        'Ignoring NaNs and Infs in data.' );
end
ft_ = fittype('poly4');

% Fit this model using new data
[cf_,goodness] = fit(x1(ok_),y1(ok_),ft_);
% Alternatively uncomment the following lines to use coefficients from the
% original fit. You can use this choice to plot the original fit against new
% data.
fitResult=[cf_.p1 cf_.p2 cf_.p3 cf_.p4 cf_.p5]';
%    cv_ = { -7.7609126929857393e-013, -6.3105269504114005e-010, 1.6430272041743742e-006, 0.0024012567272566894, -0.27907289645388961};
%    cf_ = cfit(ft_,cv_{:});

% Plot this fit
h_ = plot(cf_,'fit',0.95);
set(h_(1),'Color',[1 0 0],...
    'LineStyle','-', 'LineWidth',2,...
    'Marker','none', 'MarkerSize',6);
% Turn off legend created by plot method.
legend off;
% Store line handle and fit name for legend.
legh_(end+1) = h_(1);
legt_{end+1} = 'fit 1';

% --- Finished fitting and plotting data. Clean up.
hold off;
% Display legend
leginfo_ = {'Orientation', 'vertical', 'Location', 'NorthEast'};
h_ = legend(ax_,legh_,legt_,leginfo_{:});
set(h_,'Interpreter','none');

xlabel(ax_,'z (nm)');
ylabel(ax_,'\sigmax-\sigmay');
axis([-1000,1000, -3,3])

end
%% nested function putp
%% nested function iQ_pkfnd
%% nested function iQ_nearestPoints
end